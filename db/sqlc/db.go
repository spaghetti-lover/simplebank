// Code generated by sqlc. DO NOT EDIT.
// versions:
<<<<<<< HEAD
//   sqlc v1.28.0
=======
//   sqlc v1.22.0
>>>>>>> d4d0e58 (refactor)

package db

import (
	"context"
<<<<<<< HEAD
	"database/sql"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
=======

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
)

type DBTX interface {
	Exec(context.Context, string, ...interface{}) (pgconn.CommandTag, error)
	Query(context.Context, string, ...interface{}) (pgx.Rows, error)
	QueryRow(context.Context, string, ...interface{}) pgx.Row
>>>>>>> d4d0e58 (refactor)
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

type Queries struct {
	db DBTX
}

<<<<<<< HEAD
func (q *Queries) WithTx(tx *sql.Tx) *Queries {
=======
func (q *Queries) WithTx(tx pgx.Tx) *Queries {
>>>>>>> d4d0e58 (refactor)
	return &Queries{
		db: tx,
	}
}
